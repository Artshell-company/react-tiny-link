{"version":3,"file":"index.umd.min.js","sources":["../src/ReactTinyLinkTypes.ts","../src/utils.ts","../src/components/Card.ts","../src/components/Description.tsx","../src/rules/utils.ts","../src/rules/Video/ScrapVideo.ts","../src/rules/Audio/ScrapAudio.ts","../src/rules/Image/ScrapImage.ts","../src/rules/Youtube/ScrapYoutube.ts","../src/rules/Amazon/ScrapAmazon.ts","../src/rules/Default/ScrapDefault.ts","../src/rules/Instagram/ScrapInstagram.ts","../src/rules/BoardGameGeek/ScrapBoardGameGeek.ts","../src/rules/Twitter/ScrapTwitter.ts","../src/rules/index.ts","../src/components/CardMedia.tsx","../src/useScraper.tsx","../src/ReactTinyLink.tsx"],"sourcesContent":["export enum ReactTinyLinkType {\n  TYPE_AMAZON = 'TYPE_AMAZON',\n  TYPE_YOUTUBE = 'TYPE_YOUTUBE',\n  TYPE_AUDIO = 'TYPE_AUDIO',\n  TYPE_VIDEO = 'TYPE_VIDEO',\n  TYPE_IMAGE = 'TYPE_IMAGE',\n  TYPE_DEFAULT = 'TYPE_DEFAULT',\n  TYPE_INSTAGRAM = 'TYPE_INSTAGRAM',\n  TYPE_BOARDGAMEGEEK = 'TYPE_BOARDGAMEGEEK',\n  TYPE_TWITTER = 'TYPE_TWITTER',\n}\n\nexport type CardSizeType = 'small' | 'large'\n\nexport interface IReactTinyLinkProps {\n  cardSize?: CardSizeType\n  maxLine: number\n  minLine: number\n  url: string\n  requestHeaders?: Headers | string[][] | Record<string, string>\n  header?: string\n  onError?: (error: Error) => void\n  onSuccess?: (response: IReactTinyLinkData) => void\n  onClick?: (e, response?: IReactTinyLinkData) => void\n  description?: string\n  showGraphic?: boolean\n  autoPlay?: boolean\n  width?: string | number\n  noCache?: boolean\n  proxyUrl?: string\n  loadSecureUrl?: boolean\n  scraper?: (\n    url: string,\n    httpClient: any,\n    defaultMedia: any,\n  ) => Promise<{\n    title: any\n    description: any\n    url: any\n    video: any[]\n    image: any[]\n    type: ReactTinyLinkType\n  }>\n  defaultMedia?: string\n}\n\nexport interface IReactTinyLinkData {\n  description: string\n  image: string[]\n  title: string\n  type: ReactTinyLinkType\n  video: string[]\n  url: string\n}\n","import { css } from 'styled-components';\nimport { IReactTinyLinkData, ReactTinyLinkType } from './ReactTinyLinkTypes';\n\nconst REGEX_STRIP_WWW = /^www\\./;\nexport const media = {\n  mobile: (...args) => css`\n    @media (max-width: 48em) {\n      ${css(...args)};\n    }\n  `,\n  desktop: (...args) => css`\n    @media (max-width: 48em) {\n      ${css(...args)};\n    }\n  `,\n};\n\nexport const getHostname = href => {\n  const { hostname } = new URL(href);\n  return hostname.replace(REGEX_STRIP_WWW, '');\n};\n\nexport const isLarge = cardSize => cardSize === 'large';\n\nexport const isValidImageURL = src => {\n  if (typeof src !== 'string') return false;\n  return !!src.match(/\\w+\\.(a?png|gif|jpe?g|svg|webp)/gi)\n}\n\nexport const isValidVideoURL = src => {\n  if (typeof src !== 'string') return false;\n  return !!src.match(/\\w+\\.(mp4|ogg|webm)/gi);\n}\n\nexport const findFirstSecureUrl = (records, condition) => {\n  const result = records.find(record => condition(record) && record.startsWith('https://'));\n  return result ? result : '';\n}\n\n/**\n * @returns {IReactTinyLinkData} with default values.\n *\n * @param url url to fetch\n * @param defaultMedia media assigned to both the image and the video\n */\nexport function defaultData(url: string, defaultMedia: string[]): IReactTinyLinkData {\n    return {\n        title: url.substring(url.lastIndexOf('/') + 1),\n        description: url.substring(url.lastIndexOf('/') + 1),\n        image: defaultMedia,\n        url: url,\n        video: defaultMedia,\n        type: ReactTinyLinkType.TYPE_DEFAULT,\n    }\n}\n\n/** does nothing. Just here to have a constance reference */\nexport function noop() {\n    return\n}\n\n/**\n * Wraps a promise to make it cancelable.\n *\n * from https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html\n * defined by @istarkov at:\n * https://github.com/facebook/react/issues/5465#issuecomment-157888325\n */\nexport const makeCancelable = (promise) => {\n  let hasCanceled_ = false;\n\n  const wrappedPromise = new Promise((resolve, reject) => {\n    promise.then(\n      val => hasCanceled_ ? reject({isCanceled: true}) : resolve(val),\n      error => hasCanceled_ ? reject({isCanceled: true}) : reject(error)\n    );\n  });\n\n  return {\n    promise: wrappedPromise,\n    cancel() {\n      hasCanceled_ = true;\n    },\n  };\n};\n","import styled, { css } from 'styled-components'\nimport { isLarge, media } from '../utils'\nimport { ReactTinyLinkType } from '../ReactTinyLinkTypes'\n\n// Media Style\nconst smallMediaStyle = css`\n  height: 127px;\n`\nconst largeMediaStyle = css`\n  height: ${({ isShownGraphic }) => (isShownGraphic ? '382px;' : 'auto')};\n`\n\n// Content Style\nconst largeContentStyle = css`\n  flex: 0 0 125px;\n`\n\nconst smallDescriptionStyle = css`\n  p {\n    -webkit-box-orient: vertical;\n    display: -webkit-box;\n    -webkit-line-clamp: ${({ maxLine }) => (maxLine ? maxLine : 2)};\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: normal;\n  }\n  ${media.mobile`\n    > p {\n      \n  -webkit-line-clamp: ${({ minLine }) => (minLine ? minLine : 1)};\n \n    }\n  `};\n`\n\nconst largeDescriptionStyle = css`\n  p {\n    -webkit-box-orient: vertical;\n    display: -webkit-box;\n    -webkit-line-clamp: ${({ maxLine }) => (maxLine ? maxLine : 2)};\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: normal;\n  }\n  ${media.mobile`\n    > p {\n      -webkit-line-clamp: ${({ minLine }) => (minLine ? minLine : 1)};\n    }\n  `};\n`\n// Styled Components for cards\nexport const Media = styled('div')`\n    display: block;\n    height: auto;\n    position: relative;\n    background: ${({ src, placeholderBg, type }) =>\n      src\n        ? `url(${src}) center center / ${\n            type === ReactTinyLinkType.TYPE_AUDIO ? `contain` : `cover`\n          } no-repeat rgb(225, 232, 237)`\n        : placeholderBg};\n    \n    flex: ${({ cardSize }) => (isLarge(cardSize) ? '1 1 0%;' : '0 0 125px;')}\n    overflow: hidden;\n    transition: flex-basis 0.25s ease-in-out 0s;\n`\nMedia.defaultProps = {\n  placeholderBg: `rgb(225, 232, 235)`,\n}\n\nexport const Video = styled('video')`\nwidth:100%;\ndisplay: block;\nheight: 100%;\n    position: relative;\n    flex: ${({ cardSize }) => (isLarge(cardSize) ? '1 1 0%;' : '0 0 125px;')}\n    overflow: hidden;\nobject-fit:cover\n`\n\nexport const ContentWrapper = styled('div')`\n  display: flex;\n  justify-content: space-around;\n  flex-direction: column;\n  flex: 1;\n  padding: 10px 15px;\n  min-width: 0;\n  box-sizing: border-box;\n  ${({ cardSize }) => isLarge(cardSize) && largeContentStyle};\n`\n\nexport const Header = styled('header')`\n  text-align: left;\n  font-size: 16px;\n  font-weight: bold;\n  margin: 0;\n  flex-grow: 1.2;\n\n  ${({ cardSize }) => (!isLarge(cardSize) ? smallDescriptionStyle : largeDescriptionStyle)};\n`\nexport const Content = styled('div')`\n  text-align: left;\n  font-size: 14px;\n  flex-grow: 1;\n  margin: auto 0;\n  line-height: 18px;\n\n  ${({ cardSize }) => (!isLarge(cardSize) ? smallDescriptionStyle : largeDescriptionStyle)};\n`\n\nexport const Footer = styled('footer')`\n  text-align: left;\n  font-size: 12px;\n  margin: 0;\n  flex-grow: 0;\n`\n\nexport const Card = styled('a')`\n  max-width: ${({ width }) => (width ? width : `100vw`)};\n  background-color: rgb(255, 255, 255);\n  color: rgb(24, 25, 25);\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  display: flex;\n  opacity: 1;\n  position: relative;\n  transition-duration: 0.35s;\n  transition-timing-function: ease-in-out;\n  flex-direction: ${({ cardSize }) => (isLarge(cardSize) ? 'column' : 'row')}\n    ${({ cardSize }) => (isLarge(cardSize) ? largeMediaStyle : smallMediaStyle)};\n\n  transition-property: background, border-color, height;\n  border-width: 1px;\n  border-style: solid;\n  border-color: rgb(225, 232, 237);\n  overflow: hidden;\n  text-decoration: none;\n  -webkit-tap-highlight-color: rgb(245, 248, 250);\n  cursor: pointer;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.08);\n  &:hover {\n    background: rgb(245, 248, 250);\n  }\n`\nCard.defaultProps = {\n  rel: 'noopener noreferrer',\n  target: '_blank',\n}\n","import * as React from 'react';\n\nimport styled, { css, keyframes } from 'styled-components';\n\n// Key Frames\nconst shimmerKeyFrame = keyframes`\n   0%{\n        background-position: 100% 80%;\n    }\n    100%{\n        background-position: 0 80%;\n    }\n`\nconst loadingStyle = css`\n  animation-duration: 1.4s;\n  animation-fill-mode: forwards;\n  animation-iteration-count: infinite;\n  animation-timing-function: linear;\n  animation-name: ${shimmerKeyFrame};\n  background: darkgray;\n  background: linear-gradient(90deg, #cacaca 25%, #e4e4e4 37%, #f7f6f6 63%);\n  background-size: 800px 100%;\n  color: transparent;\n  -webkit-line-clamp: 1;\n  border-radius: 10px;\n  width: ${({ loadingWidth }) => (loadingWidth ? `${100 / loadingWidth}%` : `100%`)};\n`\n\nconst UnstyledDescription = ({ loading, loadingWidth, maxLine, minLine, className, ...props}) => {\n    return (\n        <p {...props} className={className}>{...props.children}</p>\n    );\n}\n\nexport const Description = styled(UnstyledDescription)<{ loading: boolean }>`\n  &&& {\n    text-align: inherit;\n    font-weight: inherit;\n    font-family: inherit;\n    color: inherit;\n    margin: 0;\n    ${({ loading }) => loading && loadingStyle}\n  }\n`\n\nexport default Description;\n","const REGEX_AMAZON_URL = /https?:\\/\\/(.*amazon\\..*\\/.*|.*amzn\\..*\\/.*|.*a\\.co\\/.*)/i\nexport const isAmazonUrl = url => REGEX_AMAZON_URL.test(url)\n\nconst REGEX_YOUTUBE = /^(https?:\\/\\/)?(www\\.)?(youtube\\.com|youtu\\.?be)\\/.+$/gi\nexport const isYoutubeUrl = url => !!url.toString().match(REGEX_YOUTUBE)\n\nconst REGEX_INSTAGRAM = /(https?:\\/\\/www\\.)?instagram\\.com(\\/p\\/\\w+\\/?)/gi\nexport const isInstagramUrl = url => !!url.toString().match(REGEX_INSTAGRAM)\n\nconst REGEX_BOARDGAMEGEEK = /(https?:\\/\\/www\\.)?boardgamegeek\\.com(\\/boardgame\\/\\w+\\/\\w+\\/?)/gi\nexport const isBoardGameGeekUrl = url => !!url.toString().match(REGEX_BOARDGAMEGEEK)\n\nconst REGEX_TWITTER = /(https?:\\/\\/(www)?\\.?)?twitter\\.com\\/.+/gi\nexport const isTwitterUrl = url => !!url.toString().match(REGEX_TWITTER)\n\nexport const isEmpty = (value: any) => {\n  let isEmptyObject = function(a) {\n    if (typeof a.length === 'undefined') {\n      // it's an Object, not an Array\n      let hasNonempty = Object.keys(a).some(function nonEmpty(element) {\n        return !isEmpty(a[element])\n      })\n      return hasNonempty ? false : isEmptyObject(Object.keys(a))\n    }\n\n    return !a.some(function nonEmpty(element) {\n      // check if array is really not empty as JS thinks\n      return !isEmpty(element) // at least one element should be non-empty\n    })\n  }\n  return (\n    value == false ||\n    typeof value === 'undefined' ||\n    value == null ||\n    (typeof value === 'object' && isEmptyObject(value))\n  )\n}\n\nexport const isAudio = (mimeType: string) => mimeType.startsWith('audio/')\nexport const isVideo = (mimeType: string) => mimeType.startsWith('video/')\nexport const isImage = (mimeType: string) => mimeType.startsWith('image/')\n\n// Basic Scrap Helpers\nexport const getTitleOfDoc = (htmlDoc: any) => {\n  const titleEl = htmlDoc.querySelector('title')\n  if (!titleEl) {\n    return null\n  }\n  return titleEl.innerText\n}\n\nexport const getAttrOfDocElement = (htmlDoc: any, query: string, attr: string) => {\n  const el = htmlDoc.querySelector(query)\n  if (!el) {\n    return null\n  }\n  return el.getAttribute(attr)\n}\n\nexport const getYoutTubeVideoId = (url: string) => {\n  const parsed = url.match(/^.*((m\\.)?youtu\\.be\\/|vi?\\/|u\\/\\w\\/|embed\\/|\\?vi?=|\\&vi?=)([^#\\&\\?]*).*/)\n\n  if (parsed && parsed[3]) {\n    return parsed[3]\n  } else {\n    return null\n  }\n}\n\nexport const getInstagramVideo = (htmlDoc: any) => {\n  const videoLinkMatcher = /(?:\"video_url\":\")(.*?)(?:\")/g\n  if (videoLinkMatcher.test(htmlDoc)) {\n    const videoMatches = videoLinkMatcher.exec(htmlDoc)\n    if (videoMatches && videoMatches.length !== 0) {\n      return videoMatches[0].split('\":\"')[1].replace('\"', '')\n    }\n  }\n  return null\n}\n\nexport const fixRelativeUrls = (baseUrl: string, itemUrl: string) => {\n  const normalizedUrl = itemUrl.toLocaleLowerCase()\n  if (normalizedUrl.startsWith('http://') || normalizedUrl.startsWith('https://')) {\n    return itemUrl\n  }\n  return new URL(itemUrl, baseUrl).href\n}\n\nexport const getBaseUrl = (htmlDoc: any, url: string) => getAttrOfDocElement(htmlDoc, 'base', 'href') || new URL(url).origin\n","import { ReactTinyLinkType } from '../../ReactTinyLinkTypes'\nimport { isEmpty } from '../utils'\n\nexport default async (url: string, defaultMedia: string[]) => {\n  return {\n    title: url.substring(url.lastIndexOf('/') + 1),\n    description: url,\n    image: [],\n    video: [url, defaultMedia].filter(i => !isEmpty(i)),\n    url: url,\n    type: ReactTinyLinkType.TYPE_VIDEO,\n  }\n}\n","import { ReactTinyLinkType } from '../../ReactTinyLinkTypes'\nimport { isEmpty } from '../utils'\n\nexport default async (url: string, defaultMedia: string[]) => {\n  return {\n    title: url.substring(url.lastIndexOf('/') + 1),\n    description: url.substring(url.lastIndexOf('/') + 1),\n    url: url,\n    image: [defaultMedia].filter(i => !isEmpty(i)),\n    video: [],\n    type: ReactTinyLinkType.TYPE_AUDIO,\n  }\n}\n","import { ReactTinyLinkType } from '../../ReactTinyLinkTypes'\nimport { isEmpty } from '../utils'\n\nexport default async (url: string, defaultMedia: string[]) => ({\n  title: url.substring(url.lastIndexOf('/') + 1),\n  description: url.substring(url.lastIndexOf('/') + 1),\n  url: url,\n  video: [],\n  image: [url, defaultMedia].filter(i => !isEmpty(i)),\n  type: ReactTinyLinkType.TYPE_IMAGE,\n})\n","import { ReactTinyLinkType } from '../../ReactTinyLinkTypes'\nimport { isEmpty, getYoutTubeVideoId } from '../utils'\n\nconst titleRegex = /\"title\":\"(.+?)\"/g\n\nexport default async (url, htmlDoc, defaultMedia) => {\n  const id = getYoutTubeVideoId(url)\n  const image = [\n    `https://img.youtube.com/vi/${id}/0.jpg`,\n    `https://img.youtube.com/vi/${id}/1.jpg`,\n    `https://img.youtube.com/vi/${id}/2.jpg`,\n    `https://img.youtube.com/vi/${id}/3.jpg`,\n  ]\n  try {\n    const { title } = JSON.parse(\n      `{${\n      htmlDoc\n        .querySelector('html')\n        .innerHTML.toString()\n        .match(titleRegex)[0]\n      }}`,\n    )\n    return {\n      title: title,\n      url: url,\n      description: url,\n      type: ReactTinyLinkType.TYPE_YOUTUBE,\n      video: [],\n      image: image.filter(i => !isEmpty(i)),\n    }\n  } catch (error) {\n    return {\n      title: htmlDoc.querySelector('title').innerText,\n      url: url,\n      description: url,\n      type: ReactTinyLinkType.TYPE_YOUTUBE,\n      video: [],\n      image: !defaultMedia ? image.filter(i => !isEmpty(i)) : [...image, defaultMedia].filter(i => !isEmpty(i)),\n    }\n  }\n}\n","import { ReactTinyLinkType } from '../../ReactTinyLinkTypes'\nimport { isEmpty, getTitleOfDoc, getAttrOfDocElement, fixRelativeUrls, getBaseUrl } from '../utils'\n\nexport default async (url, htmlDoc, defaultMedia) => {\n  let baseUrl = getBaseUrl(htmlDoc, url)\n\n  const image = [\n    getAttrOfDocElement(htmlDoc, '.a-dynamic-image', 'data-old-hires'),\n    getAttrOfDocElement(htmlDoc, '.a-dynamic-image', 'src'),\n  ]\n  return {\n    title: getTitleOfDoc(htmlDoc),\n    content: getAttrOfDocElement(htmlDoc, \"meta[name='description']\", 'content'),\n    url: getAttrOfDocElement(htmlDoc, \"meta[property='og:url']\", 'content'),\n    image: !defaultMedia\n      ? image.filter(i => !isEmpty(i)).map(i => fixRelativeUrls(baseUrl, i))\n      : [...image, defaultMedia].filter(i => !isEmpty(i)),\n    description: getAttrOfDocElement(htmlDoc, \"meta[name='description']\", 'content'),\n    video: [],\n    type: ReactTinyLinkType.TYPE_AMAZON, // MIME Type\n    publisher: ['Amazon'],\n  }\n}\n","import { ReactTinyLinkType } from '../../ReactTinyLinkTypes'\nimport { isEmpty, getTitleOfDoc, getAttrOfDocElement, fixRelativeUrls, getBaseUrl } from '../utils'\n\nexport default async (url, htmlDoc, defaultMedia) => {\n  let baseUrl = getBaseUrl(htmlDoc, url)\n\n  const image = [\n    getAttrOfDocElement(htmlDoc, 'meta[property=\"og:logo\"]', 'content'),\n    getAttrOfDocElement(htmlDoc, 'meta[itemprop=\"logo\"]', 'content'),\n    getAttrOfDocElement(htmlDoc, 'img[itemprop=\"logo\"]', 'src'),\n    getAttrOfDocElement(htmlDoc, \"meta[property='og:image']\", 'content'),\n    getAttrOfDocElement(htmlDoc, 'img[class*=\"logo\" i]', 'src'),\n    getAttrOfDocElement(htmlDoc, 'img[src*=\"logo\" i]', 'src'),\n    getAttrOfDocElement(htmlDoc, 'meta[property=\"og:image:secure_url\"]', 'content'),\n    getAttrOfDocElement(htmlDoc, 'meta[property=\"og:image:url\"]', 'content'),\n    getAttrOfDocElement(htmlDoc, 'meta[property=\"og:image\"]', 'content'),\n    getAttrOfDocElement(htmlDoc, 'meta[name=\"twitter:image:src\"]', 'content'),\n    getAttrOfDocElement(htmlDoc, 'meta[name=\"twitter:image\"]', 'content'),\n    getAttrOfDocElement(htmlDoc, 'meta[itemprop=\"image\"]', 'content'),\n  ]\n    .filter(i => !isEmpty(i))\n    .map(i => fixRelativeUrls(baseUrl, i))\n\n  return {\n    title: getTitleOfDoc(htmlDoc),\n    content: getAttrOfDocElement(htmlDoc, \"meta[name='description']\", 'content'),\n    url: getAttrOfDocElement(htmlDoc, \"meta[property='og:url']\", 'content'),\n    description: getAttrOfDocElement(htmlDoc, \"meta[name='description']\", 'content'),\n    video: [],\n    image: !defaultMedia\n      ? image.filter(i => !isEmpty(i)).map(i => fixRelativeUrls(baseUrl, i))\n      : [...image, defaultMedia].filter(i => !isEmpty(i)),\n    type: ReactTinyLinkType.TYPE_DEFAULT, // MIME Type\n  }\n}\n","import { ReactTinyLinkType } from '../../ReactTinyLinkTypes'\nimport { isEmpty } from '../utils'\n\nexport default async (url: string, data, defaultMedia) => {\n  const scrappedData = JSON.parse(data)\n\n  return {\n    title: scrappedData.graphql.shortcode_media.accessibility_caption,\n    content: url,\n    url: url,\n    description: scrappedData.title,\n    video: null,\n    image: !defaultMedia\n      ? [scrappedData.graphql.shortcode_media.display_url]\n      : [scrappedData.graphql.shortcode_media.display_url, defaultMedia].filter(i => !isEmpty(i)),\n    type: ReactTinyLinkType.TYPE_IMAGE, // MIME Type\n  }\n}\n","import { ReactTinyLinkType } from '../../ReactTinyLinkTypes'\nimport { isEmpty, getTitleOfDoc, getAttrOfDocElement, fixRelativeUrls } from '../utils'\n\nexport default async (url, htmlDoc, defaultMedia) => {\n  let baseUrl = getAttrOfDocElement(htmlDoc, 'base', 'href')\n  if (!baseUrl) {\n    baseUrl = url\n  }\n  const image = [\n    getAttrOfDocElement(htmlDoc, 'meta[name=\"twitter:image:src\"]', 'content')\n  ]\n  return {\n    title: getTitleOfDoc(htmlDoc),\n    content: getAttrOfDocElement(htmlDoc, \"meta[name='description']\", 'content'),\n    url: getAttrOfDocElement(htmlDoc, \"meta[property='og:url']\", 'content'),\n    image: !defaultMedia\n      ? image.filter(i => !isEmpty(i)).map(i => fixRelativeUrls(baseUrl, i))\n      : [...image, defaultMedia].filter(i => !isEmpty(i)),\n    description: getAttrOfDocElement(htmlDoc, \"meta[name='description']\", 'content'),\n    video: [],\n    type: ReactTinyLinkType.TYPE_BOARDGAMEGEEK, // MIME Type\n    publisher: ['BoardGameGeek'],\n  }\n}\n","import { ReactTinyLinkType } from '../../ReactTinyLinkTypes'\nimport { isEmpty, getAttrOfDocElement, fixRelativeUrls, getBaseUrl } from '../utils'\n\nexport default async (url, data, htmlDoc, defaultMedia) => {\n  const scrappedData = JSON.parse(data)\n  const htmlElement = document.createElement(`html`)\n  htmlElement.innerHTML = scrappedData.html\n\n  let baseUrl = getBaseUrl(htmlDoc, url)\n\n  const image = [\n    getAttrOfDocElement(htmlDoc, \"meta[property='og:image']\", 'content'),\n    getAttrOfDocElement(htmlDoc, \"meta[property='og:image:user_generated']\", 'content'),\n    'https://help.twitter.com/content/dam/help-twitter/twitter-logo.png',\n  ]\n    .filter(i => !isEmpty(i))\n    .map(i => fixRelativeUrls(baseUrl, i))\n\n  const video = [\n    getAttrOfDocElement(htmlDoc, \"meta[property='og:video:url']\", 'content'),\n    getAttrOfDocElement(htmlDoc, \"meta[property='og:video:secure_url']\", 'content'),\n  ]\n    .filter(i => !isEmpty(i))\n    .map(i => fixRelativeUrls(baseUrl, i))\n\n  return {\n    title: htmlElement.querySelector('p').textContent,\n    description: scrappedData.author_name,\n    url: getAttrOfDocElement(htmlDoc, \"meta[property='og:url']\", 'content'),\n    video: video,\n    image: !defaultMedia ? image : [...image, defaultMedia].filter(i => !isEmpty(i)),\n    type: ReactTinyLinkType.TYPE_TWITTER, // MIME Type\n    publisher: ['Twitter'],\n  }\n}\n","import {\n  isVideo,\n  isAudio,\n  isImage,\n  isYoutubeUrl,\n  isAmazonUrl,\n  isEmpty,\n  isInstagramUrl,\n  isBoardGameGeekUrl,\n  isTwitterUrl,\n} from './utils'\nimport ScrapVideo from './Video/ScrapVideo'\nimport ScrapAudio from './Audio/ScrapAudio'\nimport ScrapImage from './Image/ScrapImage'\nimport ScrapYoutube from './Youtube/ScrapYoutube'\nimport ScrapAmazon from './Amazon/ScrapAmazon'\nimport ScrapDefault from './Default/ScrapDefault'\nimport ScrapInstagram from './Instagram/ScrapInstagram'\nimport ScrapBoardGameGeek from './BoardGameGeek/ScrapBoardGameGeek'\nimport ScrapTwitter from './Twitter/ScrapTwitter'\n\nexport default async (url: string, httpClient, defaultMedia: string[]) => {\n  if (!isEmpty(url)) {\n    const response = await httpClient\n    const mimeType = response.headers.get('content-type')\n    const data = await response.text()\n    const htmlDoc = new DOMParser().parseFromString(data, 'text/html')\n    if (isVideo(mimeType)) {\n      return await ScrapVideo(url, defaultMedia)\n    } else if (isAudio(mimeType)) {\n      return await ScrapAudio(url, defaultMedia)\n    } else if (isImage(mimeType)) {\n      return await ScrapImage(url, defaultMedia)\n    } else if (isInstagramUrl(url)) {\n      return await ScrapInstagram(url, data, defaultMedia)\n    } else if (isYoutubeUrl(url)) {\n      return await ScrapYoutube(url, htmlDoc, defaultMedia)\n    } else if (isAmazonUrl(url)) {\n      return await ScrapAmazon(url, htmlDoc, defaultMedia)\n    } else if (isBoardGameGeekUrl(url)) {\n      return await ScrapBoardGameGeek(url, htmlDoc, defaultMedia)\n    } else if (isTwitterUrl(url)) {\n      return await ScrapTwitter(url, data, htmlDoc, defaultMedia)\n    } else {\n      return await ScrapDefault(url, htmlDoc, defaultMedia)\n    }\n  }\n}\n","import * as React from 'react'\nimport { Media, Video } from './Card'\nimport { ReactTinyLinkType } from '../ReactTinyLinkTypes'\nimport { isValidImageURL, isValidVideoURL, findFirstSecureUrl } from '../utils'\n\nconst ImageWrapper = ({ data, secureImageUrl, loadSecureUrl }) => {\n  if (loadSecureUrl && !secureImageUrl) return null\n  const imageUrl = data.image && ((loadSecureUrl && secureImageUrl) ? secureImageUrl : data.image[0])\n\n  if (!imageUrl) {\n    return null\n  }\n\n  return <img\n    style={{ display: `none` }}\n    src={imageUrl}\n    onError={(e: any) => {\n      e.target.parentElement.style.filter = ''\n    }}\n    onLoad={(e: any) => {\n      e.target.parentElement.style.filter = ''\n    }}\n  />\n\n}\n\nconst VideoWrapper = ({ data, secureVideoUrl, loadSecureUrl, autoPlay }) => {\n  if (loadSecureUrl && !secureVideoUrl) return null\n  const videoUrl = data.video && ((loadSecureUrl && secureVideoUrl) ? secureVideoUrl : data.video[0])\n\n  if (!videoUrl) {\n    return null\n  }\n\n  return <Video\n    muted\n    onCanPlayThrough={e => {\n      let video = e.target\n      setTimeout(() => {\n        video.pause()\n      }, 1000)\n    }}\n    autoPlay={autoPlay}\n    controls\n  >\n    <source src={`${videoUrl}#t=0.1`}></source>\n  </Video>\n\n}\n\n\nconst CardMedia = ({ data, cardSize, autoPlay, loadSecureUrl }) => {\n  const secureImageUrl = data.image && findFirstSecureUrl(data.image, isValidImageURL)\n  const secureVideoUrl = data.video && findFirstSecureUrl(data.video, isValidVideoURL)\n\n  return (\n    <>\n      {data.type !== ReactTinyLinkType.TYPE_VIDEO && (\n        <Media\n          className=\"react_tinylink_card_media\"\n          cardSize={cardSize}\n          src={data.image && (secureImageUrl ? secureImageUrl : data.image[0])}\n          type={data.type}\n          style={{ WebkitFilter: 'blur(10px)', filter: 'blur(10px)' }}\n        >\n          <ImageWrapper data={data} secureImageUrl={secureImageUrl} loadSecureUrl={loadSecureUrl} />\n        </Media>\n      )}\n      {data.type && data.type === ReactTinyLinkType.TYPE_VIDEO && (\n        <Media\n          className=\"react_tinylink_card_media\"\n          cardSize={cardSize}\n          src={data.video && (secureVideoUrl ? secureVideoUrl : data.video[0])}\n          type={data.type}\n        >\n          <VideoWrapper data={data} secureVideoUrl={secureVideoUrl} autoPlay={autoPlay} loadSecureUrl={loadSecureUrl} />\n        </Media>\n      )}\n    </>\n  )\n}\n\nexport default CardMedia\n","import { useState, useEffect } from 'react'\n\n// Helpers\nimport ScraperWraper from './rules'\nimport { makeCancelable } from './utils'\n\n// Types\nimport { IReactTinyLinkData } from './ReactTinyLinkTypes'\nimport { isInstagramUrl, isTwitterUrl } from './rules/utils'\n\n/** current state of the fetch */\nexport interface IState<T, E> {\n  /**\n   * The respones to the request. Undefined if the request not done or returned\n   * an error.\n   */\n  response: T | undefined\n\n  /** Loading status. `true` if loading, `false` otherwise. */\n  loading: boolean\n\n  /**\n   * Error status. Undefined if the request returned a valid response or is\n   * loading.\n   */\n  error: E | undefined\n}\n\n/** array composed of:\n * 1. The respones to the request. Undefined if the request not done or returned\n *    an error.\n * 2. The loading status. `true` if loading, `false` otherwise.\n * 3. Ther error status. Undefined if the request returned a valid response or is\n *    loading.\n */\nexport type ResponseState<T, E> = [T | undefined, boolean, E | undefined]\n\nexport type UseScraperConfig = {\n  url: string\n  proxyUrl?: string\n  requestHeaders?: Headers | string[][] | Record<string, string>\n  /** default medias passed to the `ScraperWraper` */\n  defaultMedias?: string[]\n  /**\n   * Permits to pass a default value. This will be the response's value\n   * during the loading and in case of error.\n   */\n  defaultValue?: IReactTinyLinkData\n  /** disables cache */\n  noCache?: boolean\n  // Hooks for the caller\n  /** Called when the fetch failed with the reason of the failure */\n  onError?: (error: Error) => void\n  /** Called when the fetch succeeded with the resulting data */\n  onSuccess?: (response: IReactTinyLinkData) => void\n}\n\ntype CacheMap = Map<string, IReactTinyLinkData>\n\nconst cache: CacheMap = new Map()\n\nexport function useScraper({\n  url,\n  proxyUrl = 'https://cors-anywhere.herokuapp.com',\n  defaultMedias = [],\n  defaultValue,\n  noCache,\n  onError,\n  onSuccess,\n  requestHeaders,\n}: UseScraperConfig): ResponseState<IReactTinyLinkData, Error> {\n  // Alias to IState\n  type State = IState<IReactTinyLinkData, Error>\n\n  // Setup the state\n  const [state, setState] = useState<State>({\n    response: defaultValue,\n    loading: true, // Avoid a re-render to set to true\n    error: undefined,\n  })\n\n  /** Does the fetch on mount. Ensure the cleanup in case of premature unmounting */\n  useEffect(() => {\n    // Permit to control if should set the state. Avoiding a memory leak\n    let isMounted: boolean = true\n\n    // Wraps the `ScraperWraper` to manage the hook's state\n    const doFetch = async (): Promise<IReactTinyLinkData> => {\n      const finalStateUpdate: Partial<State> = { loading: false, error: undefined }\n      let headers = requestHeaders\n\n      try {\n        // actual request to preview the link\n        let urlToCall = proxyUrl ? `${proxyUrl}/${url}` : url\n        if (isInstagramUrl(url)) {\n          const modifiedInstaUrl = `${url}?__a=1&max_id=endcursor`\n          urlToCall = modifiedInstaUrl\n        } else if (isTwitterUrl(url)) {\n          const modifiedInstaUrl = `https://publish.twitter.com/oembed?url=${url}`\n          urlToCall = proxyUrl ? `${proxyUrl}/${modifiedInstaUrl}` : modifiedInstaUrl\n        }\n\n        let data\n        if (!noCache && cache.has(urlToCall)) {\n          data = cache.get(urlToCall)\n        } else {\n          const client = fetch(urlToCall, { headers })\n          data = await ScraperWraper(url, client, defaultMedias)\n          cache.set(urlToCall, data)\n        }\n        finalStateUpdate.response = data\n\n        onSuccess && isMounted && onSuccess(data)\n        return data\n      } catch (err) {\n        finalStateUpdate.error = err\n        onError && isMounted && onError(err)\n\n        return err\n      } finally {\n        isMounted && setState(old => ({ ...old, ...finalStateUpdate }))\n      }\n    }\n\n    // Makes the request and wraps it so we can cancel it if needed\n    const cancelable = makeCancelable(doFetch());\n    // avoid throw errors on promise cancel, other errors should be catched inside doFetch function\n    cancelable.promise.catch(() => {});\n\n    // Returns a cleanup function which permits to avoid potential\n    // memory leaks and unnecessary network when the component is\n    // unmount.\n    return () => {\n      isMounted = false // Avoid all the state management\n      cancelable.cancel() // Cancel the request\n    }\n  }, [url, proxyUrl, noCache]) // Put no dependecy, does the fetch only once on mount\n\n  return [state.response, state.loading, state.error]\n}\n\n/** headers passed to the fetch request */\n","import * as React from 'react'\nimport { Card, ContentWrapper, Header, Content, Footer } from './components/Card'\nimport Description from './components/Description'\nimport { getHostname, noop, defaultData } from './utils'\nimport { IReactTinyLinkProps } from './ReactTinyLinkTypes'\nimport ScraperWraper from './rules'\nimport CardMedia from './components/CardMedia'\nimport { useScraper } from './useScraper'\n\nexport const useScrapper = useScraper\nexport const ScrapperWraper = ScraperWraper\nexport const ReactTinyLink: React.FC<IReactTinyLinkProps> = ({\n  cardSize = 'small',\n  maxLine = 2,\n  minLine = 1,\n  header = null,\n  description = null,\n  url = '',\n  width = '640px',\n  noCache = false,\n  proxyUrl = 'https://cors-anywhere.herokuapp.com',\n  showGraphic = true,\n  autoPlay = false,\n  defaultMedia = '',\n  loadSecureUrl = false,\n  onError = noop, // Permit to keep a constant reference\n  onSuccess = noop,\n  onClick = null,\n  requestHeaders = { 'x-requested-with': '' },\n}: IReactTinyLinkProps) => {\n  const defaultMedias = defaultMedia ? [defaultMedia] : []\n  const [data, loading] = useScraper({\n    url,\n    proxyUrl,\n    requestHeaders,\n    defaultMedias,\n    defaultValue: defaultData(url, defaultMedias),\n    noCache,\n    onError,\n    onSuccess,\n  })\n\n  return (\n    <Card\n      onClick={e => {\n        if (!onClick) return;\n        e.preventDefault()\n        onClick(e, data)\n      }}\n      className=\"react_tinylink_card\"\n      cardSize={cardSize}\n      href={url}\n      width={width}\n      isShownGraphic={showGraphic}\n    >\n      {showGraphic && (\n        <CardMedia autoPlay={autoPlay} cardSize={cardSize} data={data} loadSecureUrl={loadSecureUrl} />\n      )}\n      <ContentWrapper className=\"react_tinylink_card_content_wrapper\" cardSize={cardSize}>\n        <Header maxLine={maxLine} minLine={minLine} className=\"react_tinylink_card_content_header\">\n          <Description\n            loading={loading}\n            loadingWidth={2}\n            maxLine={maxLine}\n            minLine={minLine}\n            className=\"react_tinylink_card_content_header_description\"\n          >\n            {header ? header : data.title ? data.title : url}\n          </Description>\n        </Header>\n        <Content maxLine={maxLine} minLine={minLine} className=\"react_tinylink_card_content\" cardSize={cardSize}>\n          <Description loading={loading} loadingWidth={1} className=\"react_tinylink_card_content_description\">\n            {description ? description : data.description ? data.description : url}\n          </Description>\n        </Content>\n        <Footer className=\"react_tinylink_footer\">\n          <Description loading={loading} loadingWidth={1} className=\"react_tinylink_card_footer_description\">\n            {getHostname(url)}\n          </Description>\n        </Footer>\n      </ContentWrapper>\n    </Card>\n  )\n}\n"],"names":["ReactTinyLinkType","REGEX_STRIP_WWW","media","_i","args","css","isLarge","cardSize","isValidImageURL","src","match","isValidVideoURL","findFirstSecureUrl","records","condition","result","find","record","startsWith","defaultData","url","defaultMedia","title","substring","lastIndexOf","description","image","video","type","TYPE_DEFAULT","noop","smallMediaStyle","largeMediaStyle","_a","largeContentStyle","smallDescriptionStyle","maxLine","minLine","largeDescriptionStyle","Media","styled","placeholderBg","TYPE_AUDIO","defaultProps","Video","ContentWrapper","Header","Content","Footer","Card","width","rel","target","shimmerKeyFrame","keyframes","loadingStyle","loadingWidth","Description","className","props","React","children","REGEX_AMAZON_URL","REGEX_YOUTUBE","REGEX_INSTAGRAM","isInstagramUrl","toString","REGEX_BOARDGAMEGEEK","REGEX_TWITTER","isTwitterUrl","isEmpty","value","isEmptyObject","a","length","Object","keys","some","element","getTitleOfDoc","htmlDoc","titleEl","querySelector","innerText","getAttrOfDocElement","query","attr","el","getAttribute","fixRelativeUrls","baseUrl","itemUrl","normalizedUrl","toLocaleLowerCase","URL","href","getBaseUrl","origin","filter","i","TYPE_VIDEO","TYPE_IMAGE","titleRegex","id","parsed","getYoutTubeVideoId","JSON","parse","innerHTML","TYPE_YOUTUBE","error","content","map","TYPE_AMAZON","publisher","data","scrappedData","graphql","shortcode_media","accessibility_caption","display_url","TYPE_BOARDGAMEGEEK","htmlElement","document","createElement","html","textContent","author_name","TYPE_TWITTER","httpClient","response","mimeType","headers","get","text","DOMParser","parseFromString","isVideo","ScrapVideo","isAudio","ScrapAudio","isImage","ScrapImage","ScrapInstagram","isYoutubeUrl","ScrapYoutube","test","isAmazonUrl","ScrapAmazon","isBoardGameGeekUrl","ScrapBoardGameGeek","ScrapTwitter","ScrapDefault","ImageWrapper","secureImageUrl","loadSecureUrl","imageUrl","style","display","onError","e","parentElement","onLoad","VideoWrapper","secureVideoUrl","autoPlay","videoUrl","muted","onCanPlayThrough","setTimeout","pause","controls","CardMedia","WebkitFilter","cache","Map","useScraper","_b","proxyUrl","_c","defaultMedias","defaultValue","noCache","onSuccess","requestHeaders","_d","state","setState","useEffect","promise","hasCanceled_","isMounted","cancelable","finalStateUpdate","loading","undefined","urlToCall","modifiedInstaUrl","has","client","fetch","ScraperWraper","set","err_1","old","Promise","resolve","reject","then","val","isCanceled","cancel","catch","useScrapper","ScrapperWraper","_e","header","_f","_g","_h","_j","_k","_l","showGraphic","_m","_o","_p","_q","_r","_s","onClick","_t","_u","preventDefault","isShownGraphic","replace"],"mappings":"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"}